---
- name: Build instances
  hosts: all
  gather_facts: False
  tasks:
    - name: Server build request
      local_action:
        module: rax
        credentials: rax_creds
        name: "{{inventory_hostname}}"
        flavor: performance1-2
        image: "{{image_id}}"
        keypair: "{{keypair}}"
        disk_config: manual
        wait: yes
        state: present
        networks:
          - private
          - public
          - "{{network}}"
      register: rax

    - name: Store host access IPs
      set_fact: ansible_ssh_host={{item.accessIPv4}}
      when: item.name == inventory_hostname # Avoid dupes
      with_items: rax.instances


- name: Install chef-server
  hosts: chef
  tasks:
    - name: Add host entry on chef-server for each cluster host
      lineinfile:
        dest: /etc/hosts
        insertafter: EOF
        line: "{{hostvars[item].ansible_ssh_host}}\t{{item}}"
      with_items: groups.cluster

    - name: Upload SSH private key
      copy: src=id_rsa dest={{ansible_env.HOME}}/.ssh/id_rsa mode=0600

    - name: Download chef server
      command: wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef-server_11.0.8-1.ubuntu.12.04_amd64.deb chdir=/tmp creates=/tmp/chef-server_11.0.8-1.ubuntu.12.04_amd64.deb

    - name: Check if chef server is installed
      command: dpkg -l chef-server
      register: chef_installed
      ignore_errors: True

    - name: Install chef server
      command: dpkg -i /tmp/chef-server_11.0.8-1.ubuntu.12.04_amd64.deb
      when: chef_installed|failed

    - name: Configure chef server
      tags: chef-server
      command: chef-server-ctl reconfigure

    - name: Install git
      apt: name=git state=present

    - name: Clone chef-cookbooks
      git: repo=https://github.com/rcbops/chef-cookbooks dest={{ansible_env.HOME}}/chef-cookbooks version=master

    - name: Configure knife
      command: "{{knife_command}} configure --yes --defaults --server-url https://127.0.0.1:443 --repository chef-cookbooks/cookbooks --user admin --key /etc/chef-server/admin.pem --admin-client-key /etc/chef-server/admin.pem --admin-client-name admin --validation-client-name chef-validator --validation-key /etc/chef-server/chef-validator.pem chdir={{ansible_env.HOME}}"

    - name: Upload cookbooks
      command: "{{knife_command}} cookbook upload -o chef-cookbooks/cookbooks -a"

    - name: Upload roles
      shell: "{{knife_command}} role from_file chef-cookbooks/roles/*.rb"

    - name: Generate chef environment from template
      template: src=havana.json.j2 dest={{ansible_env.HOME}}/havana.json

    - name: Upload environment
      shell: "{{knife_command}} environment from_file havana.json"


- name: Bootstrap cluster nodes
  hosts: chef
  tasks:
    - name: Get node list
      command: "{{knife_command}} node list"
      register: list
      changed_when: False # Doesn't apply

    - name: Bootstrap nodes
      command: "{{knife_command}} bootstrap {{item}} --server-url https://{{ansible_ssh_host}}:443"
      register: bootstrap
      when: not item in list.stdout
      with_items: groups.cluster

    - name: Wait for Solr cache
      command: "{{knife_command}} exec -E \"nodes.search('name:*') {|n| puts n.name}\""
      when: bootstrap|changed
      register: output
      until: item in output.stdout
      retries: 10
      delay: 10
      with_items: groups.cluster
      changed_when: output.stdout


- name: Update chef environment
  hosts: chef
  tasks:
    - name: Set node environments
      command: "{{knife_command}} exec -E \"nodes.search('name:*') {|n| n.chef_environment('havana'); puts n.name; n.save}\""

    - name: Wait for Solr cache
      command: "{{knife_command}} exec -E \"nodes.search('chef_environment:_default') {|n| puts n.name}\""
      register: output
      until: output.stdout == ""
      retries: 10
      delay: 10
      changed_when: output.stdout != ""

    - name: Check if osd_devices attribute exists
      shell: "{{knife_command}} search node \"name:{{item}}\" -a ceph.osd_devices | grep xvde1"
      with_items: groups.ceph
      register: result
      ignore_errors: True

    - name: Create osd_devices attribute
      command: "{{knife_command}} exec -E \"@n=Chef::Node.load('{{item}}') ; a=@n.normal ; a['ceph']['osd_devices']=[{'device' => '/dev/xvde1'}];;@n.save\""
      with_items: groups.ceph
      when: result|failed


- name: Add host entry on cluster nodes for chef-server
  hosts: cluster
  tasks:
    - name: test
      lineinfile:
        dest: /etc/hosts
        insertafter: EOF
        line: "{{hostvars[item].ansible_ssh_host}}\t{{item}}"
      with_items: groups.chef


- name: Add ceph-mon role
  hosts: chef
  tasks:
    - command: "{{knife_command}} node run_list add {{groups.ceph[0]}} role[ceph-mon]"


- name: Run chef-client
  hosts: ceph[0]
  tasks:
    - command: chef-client

  
- name: Add ceph-osd role
  hosts: chef
  tasks:
    - command: "{{knife_command}} node run_list add {{item}} role[ceph-osd]"
      with_items: groups.ceph
    - name: Wait for Solr cache (if we deploy OSD before cache updates from ceph-mon run then OSD deployment will fail)
      command: "{{knife_command}} exec -E \"nodes.search('role:ceph-mon AND ceph_bootstrap_osd_key:*') {|n| puts n.name}\""
      register: output
      until: output.stdout != ""
      retries: 10
      delay: 10
      changed_when: output.stdout != ""


- name: Finish ceph deploy
  hosts: ceph
  tasks:
    - name: Run chef-client
      command: chef-client

    - name: Run ceph-disk-active
      command: /usr/sbin/ceph-disk-activate /dev/xvde1


- name: Add single-controller, cinder-volume roles
  hosts: chef
  tasks:
    - command: "{{knife_command}} node run_list add {{item}} role[single-controller],role[cinder-volume]"
      with_items: groups.openstack


- name: Run chef-client on openstack
  hosts: openstack
  tasks:
    - name: Run chef-client
      command: chef-client


- name: Add single-compute roles (this needs to be done after single-controller/cinder-volume are provisioned)
  hosts: chef
  tasks:
    - command: "{{knife_command}} node run_list add {{item}} role[single-compute]"
      with_items: groups.openstack


- name: Finish openstack deploy
  hosts: openstack
  tasks:
    - name: Run chef-client
      command: chef-client
